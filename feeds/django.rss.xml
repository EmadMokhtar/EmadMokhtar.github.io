<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Emad Mokhtar's Framework - Django</title><link>http://www.emadmokhtar.com/</link><description>Geek developer who's in search of code perfection.</description><lastBuildDate>Tue, 09 May 2017 15:00:00 +0300</lastBuildDate><item><title>Create Login Page for your Django app</title><link>http://www.emadmokhtar.com/create-login-page-for-your-django-app.html</link><description>&lt;p&gt;&lt;img alt="Create Login Page for your Django app" src="http://www.emadmokhtar.com/images/Create-Login-Page-for-your-Django-app.png"&gt;&lt;/p&gt;
&lt;h1&gt;Why Another Post about this?&lt;/h1&gt;
&lt;p&gt;I found each time I start new Django project, I need to create Login HTML page, and with that I need to write Django View and Form. Each time I tried to Google how to do it, I found many posts about how to do it from scratch, yep as you read, posts telling you how to build a Django View and Form for login page. And there are already built-in Django login &lt;a href="https://docs.djangoproject.com/en/1.11/topics/auth/default/#django.contrib.auth.views.login"&gt;View&lt;/a&gt; and &lt;a href="https://docs.djangoproject.com/en/1.11/topics/auth/default/#django.contrib.auth.forms.AuthenticationForm"&gt;Form&lt;/a&gt; (please check links).
So I decided to write my own recipe on how to create Login page in your Django app using the built-in view and form to save time and stop reinvent the wheel.&lt;/p&gt;
&lt;h1&gt;How to do it?&lt;/h1&gt;
&lt;p&gt;Actually it’s an easy one, because we’ll use already built-in View and Form, so we will build the Template for it, that it. We have a Form and View ready, so first thing first, we’ll write a template to show HTML form for login, I'm assuming you have another template called &lt;code&gt;base.html&lt;/code&gt; and we’ll just write the &lt;code&gt;container block&lt;/code&gt; part only, and we are using &lt;a href="http://getbootstrap.com"&gt;Boostrap framework&lt;/a&gt; and &lt;a href="https://github.com/django-crispy-forms/django-crispy-forms"&gt;crispy_form app&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;login.html&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% extends &amp;quot;base.html …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">EmadMokhtar</dc:creator><pubDate>Tue, 09 May 2017 15:00:00 +0300</pubDate><guid isPermaLink="false">tag:www.emadmokhtar.com,2017-05-09:/create-login-page-for-your-django-app.html</guid><category>django</category><category>python</category><category>forms</category></item><item><title>Custom Client Side Validation for Parsley in Django</title><link>http://www.emadmokhtar.com/custom-client-side-validation-for-parsley-in-django.html</link><description>&lt;p&gt;&lt;img alt="Custom Validation for Parsley in Django" src="http://www.emadmokhtar.com/images/Custom-Validation-for-Parsley-in-Django.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;I wrote a post on how to add &lt;a href="http://www.emadmokhtar.com/client-side-validation-for-django-forms.html"&gt;client side validation for Django Forms&lt;/a&gt;. In this post I’ll show you how to add custom client validation to Django Forms. I mean by custom validation is a validation that isn't available in &lt;a href="https://github.com/agiliq/Django-parsley"&gt;django-parsley&lt;/a&gt;, like username availability, password strength, email duplication, etc.. let’s see how to add custom client side validation to Django Form.&lt;/p&gt;
&lt;h1&gt;Parsley remote validation&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://parsleyjs.org/doc/index.html"&gt;Parsley library&lt;/a&gt; has &lt;a href="http://parsleyjs.org/doc/index.html#remote"&gt;remote validation&lt;/a&gt;, it's calling AJAX service (Django view) and check if AJAX call returns &lt;a href="http://www.restapitutorial.com/httpstatuscodes.html"&gt;2xx HTTP status codes&lt;/a&gt; then it's valid input else it's invalid input and shows error message. Thankfully you can use remote validation in Django Form using django-parsley via &lt;code&gt;parsley-extras&lt;/code&gt; attribute.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@parsleyfy&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserRegistrationForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelForm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="n"&gt;parsley_extras&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;remote&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;reverse_lazy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;validate-password-parsley&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;remote-message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Password is invalid&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;remote&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;reverse_lazy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;validate_username_uniqueness&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;remote-message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;User with this username is already exists.&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;remote&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;reverse_lazy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;validate_email_uniqueness&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;remote-message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;User with this email is already exists.&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the code above we are adding client custom validation as remote to &lt;code&gt;password&lt;/code&gt;, &lt;code&gt;username&lt;/code&gt;, and &lt;code&gt;email&lt;/code&gt;  fields, Did you notice that &lt;code&gt;remote&lt;/code&gt; key is holding a URL to Django View? let’s create a complete sample to get our head around it.&lt;/p&gt;
&lt;h1&gt;Django Password …&lt;/h1&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">EmadMokhtar</dc:creator><pubDate>Sun, 16 Apr 2017 15:00:00 +0300</pubDate><guid isPermaLink="false">tag:www.emadmokhtar.com,2017-04-16:/custom-client-side-validation-for-parsley-in-django.html</guid><category>django</category><category>python</category><category>parsley</category><category>validation</category></item><item><title>Client side validation for Django Forms</title><link>http://www.emadmokhtar.com/client-side-validation-for-django-forms.html</link><description>&lt;p&gt;&lt;img alt="Parsley" src="http://www.emadmokhtar.com/images/parsley.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.lovethegarden.com/sites/default/files/styles/full_width_700/public/images_and_media/parsley.jpg?itok=X7psNkrF"&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In DUTH 2016 there was a session for &lt;a href="https://youtu.be/uzTaWKcMzos"&gt;Django Validation by Loïc Bistuer&lt;/a&gt;, in the session Loïc showed many areas you can validate user inputs from Django Form way to the Database Engine. To be honest validation in Django is a piece of cake and even if there is special validation rules you want to implement, you can still implement it, as I said it is easy and straight forward in Django, all of these validation is server side which happen on web server not on client-side, so what about client side?&lt;/p&gt;
&lt;h1&gt;What is client side validation?&lt;/h1&gt;
&lt;p&gt;In simple way, client side validation is validation user input on browser before sending the data to sever.&lt;/p&gt;
&lt;p&gt;It is good practice to validate user inputs from client side to save roundtrips to server, but it needs extra work to implement your validations using JavaScript or using HTML5 form validation, but there is a way to replicate Django form validation to client side, let’s see how.&lt;/p&gt;
&lt;h1&gt;Django Parsley&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/agiliq/Django-parsley"&gt;Django Parsley&lt;/a&gt; is a Django app that replicate Django Form validation to client side using &lt;a href="http://parsleyjs.org"&gt;ParsleyJS&lt;/a&gt; library, and it’s so easy to use it.&lt;/p&gt;
&lt;h1&gt;How to use Django Parsley?&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Install Django Parsley …&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Emad Mokhtar</dc:creator><pubDate>Wed, 08 Mar 2017 00:00:00 +0300</pubDate><guid isPermaLink="false">tag:www.emadmokhtar.com,2017-03-08:/client-side-validation-for-django-forms.html</guid><category>Django</category><category>Forms</category></item><item><title>Yet another and easier way to daemonize Celery</title><link>http://www.emadmokhtar.com/yet-another-and-easier-way-to-daemonize-celery.html</link><description>&lt;p&gt;I wrote a post about &lt;a href="http://www.emadmokhtar.com/how-to-run-celery-as-daemon.html"&gt;how to run celery as daemon&lt;/a&gt; and it has many steps to do, many files to copy to your server, configure permissions, and configure upstart, but after sometime I found another and easier way to daemonize Celery.&lt;/p&gt;
&lt;p&gt;In this method we will use &lt;a href="http://supervisord.org"&gt;supervisor&lt;/a&gt; to daemonize Celery, and this can be achieved by 3 simple steps, so let's do it.&lt;/p&gt;
&lt;h1&gt;Step 1&lt;/h1&gt;
&lt;p&gt;Install Supervisord &lt;code&gt;sudo apt-get install supervisor&lt;/code&gt; on Ubuntu server. For other OSs please visit &lt;a href="http://supervisord.org/installing.html"&gt;the official documentation&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Step 2&lt;/h1&gt;
&lt;p&gt;This is the most important step, and in this step we will create supervisor configuration file to daemonize Celery.&lt;/p&gt;
&lt;h2&gt;Supervisor Configuration File&lt;/h2&gt;
&lt;p&gt;Celery project provide the basic configuration file in their &lt;a href="https://github.com/celery/celery/blob/3.1/extra/supervisord/celeryd.conf"&gt;Github repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Supervisor configuration files live in &lt;code&gt;\etc\supervisor\conf\&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Celery official configuration file&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;==================================&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;  celery worker supervisor example
&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;==================================&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;program:celery&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt; Set full path to celery program &lt;span class="k"&gt;if&lt;/span&gt; using virtualenv
&lt;span class="nv"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;celery worker -A proj --loglevel&lt;span class="o"&gt;=&lt;/span&gt;INFO

&lt;span class="nv"&gt;directory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/path/to/project
&lt;span class="nv"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nobody
&lt;span class="nv"&gt;numprocs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="nv"&gt;stdout_logfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/log/celery/worker.log
&lt;span class="nv"&gt;stderr_logfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/log/celery/worker.log
&lt;span class="nv"&gt;autostart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;autorestart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;startsecs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;

&lt;span class="p"&gt;;&lt;/span&gt; Need to &lt;span class="nb"&gt;wait&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; currently executing tasks to finish at shutdown.
&lt;span class="p"&gt;;&lt;/span&gt; Increase this &lt;span class="k"&gt;if&lt;/span&gt; you have very long running tasks.
&lt;span class="nv"&gt;stopwaitsecs …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">EmadMokhtar</dc:creator><pubDate>Mon, 21 Nov 2016 15:00:00 +0300</pubDate><guid isPermaLink="false">tag:www.emadmokhtar.com,2016-11-21:/yet-another-and-easier-way-to-daemonize-celery.html</guid><category>django</category><category>python</category><category>celery</category></item><item><title>Add isort and flake8 test to your Django Project</title><link>http://www.emadmokhtar.com/add-isort-and-flake8-test-to-your-django-project.html</link><description>&lt;p&gt;&lt;img alt="Unit Test Works" src="http://www.emadmokhtar.com/images/unit-test-works.jpg"&gt;&lt;/p&gt;
&lt;p&gt;In this post I'll tell you how to add isort and flake8 tests to your Django project test suite, this is simple script and you can start from this point and customize you own test suite.&lt;/p&gt;
&lt;p&gt;As they said Django is a “batteries included” web application framework, and one of the batteries is Testing framework, &lt;a href="https://docs.djangoproject.com/en/dev/topics/testing/"&gt;testing in Django&lt;/a&gt; is easy and you can start writing tests even if you didn't do it before.&lt;/p&gt;
&lt;p&gt;If you ever work with Django, you will write tests for your project, to test your views, models, forms, etc.. but it's better if you can add &lt;a href="https://github.com/timothycrosley/isort"&gt;isort&lt;/a&gt; and &lt;a href="http://flake8.pycqa.org/en/latest/"&gt;flake8&lt;/a&gt; tests to maintain the quality of your Python code.&lt;/p&gt;
&lt;h1&gt;Installation&lt;/h1&gt;
&lt;p&gt;We need some packages first so we can run the tests&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install flake8 isort flake8-isort
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It's better to create and use sperate virtualenv&lt;/p&gt;
&lt;h1&gt;Configurations&lt;/h1&gt;
&lt;p&gt;flake8-isort is using &lt;code&gt;.isort.cfg&lt;/code&gt; file to run the isort test against it, so let's add our configuration file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;.isort.cfg file&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[*.py]&lt;/span&gt;
&lt;span class="na"&gt;max_line_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;120&lt;/span&gt;
&lt;span class="na"&gt;indent_style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;space&lt;/span&gt;
&lt;span class="na"&gt;indent_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;4&lt;/span&gt;
&lt;span class="na"&gt;known_first_party&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;isort&lt;/span&gt;
&lt;span class="na"&gt;ignore_frosted_errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;E103&lt;/span&gt;
&lt;span class="na"&gt;skip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;runtests.py,build,.tox&lt;/span&gt;
&lt;span class="na"&gt;balanced_wrapping&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;not_skip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;__init__.py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Test Python Script&lt;/h1&gt;
&lt;p&gt;Now it's time to write the Python script to run Django, isort, &amp;amp; flake8 tests.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;runtests …&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Emad Mokhtar</dc:creator><pubDate>Tue, 27 Sep 2016 18:00:00 +0300</pubDate><guid isPermaLink="false">tag:www.emadmokhtar.com,2016-09-27:/add-isort-and-flake8-test-to-your-django-project.html</guid><category>django</category><category>python</category><category>unittest</category><category>howto</category></item><item><title>How to run Celery as daemon?</title><link>http://www.emadmokhtar.com/how-to-run-celery-as-daemon.html</link><description>&lt;p&gt;&lt;img alt="celery smoothy" src="http://www.emadmokhtar.com/images/celerysmoothie.jpg"&gt;&lt;/p&gt;
&lt;h1&gt;Install upstart script&lt;/h1&gt;
&lt;h2&gt;Permissions&lt;/h2&gt;
&lt;p&gt;We need to make the user which will be used to run celery an owner of &lt;code&gt;log&lt;/code&gt; and &lt;code&gt;run&lt;/code&gt; directories.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo chown -R root:root /var/log/celery/
sudo chown -R root:root /var/run/celery/
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Celery upstart&lt;/h2&gt;
&lt;p&gt;1- Download &lt;code&gt;celeryd&lt;/code&gt; file from &lt;a href="http://github.com/celery/celery/tree/3.1/extra/generic-init.d/"&gt;Celery official github repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;2- Copy &lt;code&gt;celeryd&lt;/code&gt; to &lt;code&gt;/etc/init.d/celeryd&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo cp celeryd /etc/init.d/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3- Make it executable&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo chmod +x celeryd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4- Make it run on startup&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo update-rc.d celeryd defaults
sudo update-rc.d celeryd &lt;span class="nb"&gt;enable&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;5- make it owned by root&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo chown root:root celeryd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;6- Done, now you can start/stop/restart celeryd as service&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo service celeryd start
sudo service celeryd stop
sudo service celeryd restart
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Celerybeat upstart&lt;/h2&gt;
&lt;p&gt;1- Download &lt;code&gt;celerybeat&lt;/code&gt; file from &lt;a href="http://github.com/celery/celery/tree/3.1/extra/generic-init.d/"&gt;Celery official github repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;2- Copy &lt;code&gt;celerybeat&lt;/code&gt; to &lt;code&gt;/etc/init.d/celerybeat&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo cp celerybeat /etc/init.d/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3- Make it executable &lt;code&gt;sudo chmod +x celerybeat&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;4- Make it run on startup&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo update-rc.d celerybeat defaults
sudo update-rc.d celerybeat &lt;span class="nb"&gt;enable&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;5- make it owned by root&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo chown root:root celerybeat
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;6- Done, now you can start/stop/restart celerd as service&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo service celerybeat start
sudo service …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Emad Mokhtar</dc:creator><pubDate>Tue, 20 Sep 2016 15:00:00 +0300</pubDate><guid isPermaLink="false">tag:www.emadmokhtar.com,2016-09-20:/how-to-run-celery-as-daemon.html</guid><category>django</category><category>python</category><category>celery</category></item><item><title>Send Emails Asynchronously from Django</title><link>http://www.emadmokhtar.com/send-emails-asynchronously-from-django.html</link><description>&lt;p&gt;In this article you will learn:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How to send emails from &lt;a href="https://www.djangoproject.com"&gt;Django&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;How to use &lt;a href="http://www.celeryproject.org/"&gt;Celery&lt;/a&gt; and &lt;a href="https://github.com/pmclanahan/django-celery-email"&gt;Django-Celery-Email&lt;/a&gt; to send email asynchronously.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Last week I had the chance to get my hand dirty with Celery, I used it to send emails from Django project asynchronously using Django app call djnago-celery-email. What am I mean by sending emails asynchronously? I mean that user doesn’t wait for SMTP/mail server to send email message and give feedback to the web server, instead Django will call the send email procedure, pass it to Celery to do it away from Django application, so that user won’t wait, for example you want to send email to customer once he save customer information, you don’t want to keep user wait for application to save the customer data and send email, by sending email asynchronously user will only wait for saving confirmation and sending email celery will take care of it in the background.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt Text" src="http://www.emadmokhtar.com/images/1442310863_full.png"&gt;&lt;/p&gt;
&lt;p&gt;Now let’s see how we can do that.&lt;/p&gt;
&lt;h2&gt;Step 1: Install and Setup Celery&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;In terminal, active your &lt;a href="http://www.emadmokhtar.com/2015/03/virtual-environment/"&gt;virtualenv&lt;/a&gt; and type &lt;code&gt;$ pip install django-celery&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Now celery and its Django app djcelery are installed into your virtualenv.&lt;/li&gt;
&lt;li&gt;Next step is …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Emad Mokhtar</dc:creator><pubDate>Sun, 24 Jan 2016 12:00:00 +0300</pubDate><guid isPermaLink="false">tag:www.emadmokhtar.com,2016-01-24:/send-emails-asynchronously-from-django.html</guid><category>django</category><category>python</category><category>celery</category><category>emails</category></item><item><title>Extend Django User Model and Generic Class Based View "GCBV"</title><link>http://www.emadmokhtar.com/extend-django-user-model-and-generic-class-based-view-gcbv.html</link><description>&lt;p&gt;&lt;img alt="1450356512_full.png" src="http://www.emadmokhtar.com/images/1450356512_full.png"&gt; When I started to learn Django, I used to use the function based view aka FBV and in my current project I decided to learn class based view CBV, I watched one &lt;a href="https://www.youtube.com/watch?v=BJiOERA49ZQ"&gt;DjangoCon videos by Andrew Pinkham&lt;/a&gt; to make this easier on me, and if you tried or planning to learn CBV, you will be confused about the class based views and the generic class based views inside Django, it’s some many of them, please watch the video to get your head around it. OK, now I’ve done my homework and it’s time to use CBV, believe me it’s easy and you will find the number of code lines inside our views will be decreased specially if you use GCBV. User Model and GCBV &lt;/p&gt;
&lt;h1&gt;What is the relation between GCBV and User Model?&lt;/h1&gt;
&lt;p&gt;Great question, while I’m working with one of my models fro example her the Teacher model, and teacher will has a user credentials in order to user the app. The easiest and the straightforward way is to make one-to-one relation with &lt;a href="https://github.com/django/django/blob/53ccffdb8c8e47a4d4304df453d8c79a9be295ab/django/contrib/auth/models.py"&gt;django.contrib.auth.models.User&lt;/a&gt; please read the quote from Django documentation: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are two ways to extend the default User …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Emad Mokhtar</dc:creator><pubDate>Fri, 18 Dec 2015 12:00:00 +0300</pubDate><guid isPermaLink="false">tag:www.emadmokhtar.com,2015-12-18:/extend-django-user-model-and-generic-class-based-view-gcbv.html</guid><category>Django</category><category>Python</category></item><item><title>Free Django hosting</title><link>http://www.emadmokhtar.com/free-django-hosting.html</link><description>&lt;p&gt;If you developed Django application and want to deploy/publish it to the web you can check this list of Django friendly (http://djangofriendly.com/hosts/), but if you want a free hosting you can use &lt;a href="https://www.pythonanywhere.com/pricing/"&gt;Python Anywhere free hosting&lt;/a&gt;, I’m using it for &lt;a href="http://www.emadmokhtar.com/my-first-django-app.html"&gt;my Django app&lt;/a&gt; and I’m very comfortable with but before using the free hosting please consider the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;They provide only MySQL for free hosting, so if you developed your app using PostgreSQL or SQLite, please download the correct driver.&lt;/li&gt;
&lt;li&gt;Application URL must be sub-domain of pythonanywhere.com, example my-app.pythonanywhere.com&lt;/li&gt;
&lt;li&gt;I’ll host one application only.&lt;/li&gt;
&lt;li&gt;No full access to a machine, you’ll deploy your application using console, use the console to install your virtual environment and packages, and edit some code using their in-browser code editor.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;How to deploy?&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;First go to this &lt;a href="https://www.pythonanywhere.com/registration/register/beginner/"&gt;&lt;span
    class="s2"&gt;link&lt;/a&gt;
    and register your free account, then &lt;/li&gt;
&lt;li&gt;Go to your dashboard, and select
    Consoles tab.&lt;/li&gt;
&lt;li&gt;Click on Python 2.7 (I personally still using
    python 2.7 but if you want select python 3.3) to open a
    new console.&lt;/li&gt;
&lt;li&gt;New console will open in your browser.&lt;/li&gt;
&lt;li&gt;Start by creating your &lt;a href="http://www.emadmokhtar.com/2015/03/virtual-environment/"&gt;virtualenv&lt;/a&gt; and install the required packages …&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">EmadMokhtar</dc:creator><pubDate>Sun, 19 Apr 2015 12:33:00 +0300</pubDate><guid isPermaLink="false">tag:www.emadmokhtar.com,2015-04-19:/free-django-hosting.html</guid><category>django</category><category>python</category></item><item><title>My First Django App</title><link>http://www.emadmokhtar.com/my-first-django-app.html</link><description>&lt;p&gt;I'm starting to use Django and Python to develop web applications, I really love Django and during my learning process I thought I can build something while learning, and I had one idea keep it on hold as side project so I decided it's time to build it.&lt;/p&gt;
&lt;h1&gt;The Idea&lt;/h1&gt;
&lt;p&gt;Me and my wife have our financial system which is dividing the monthly budget into a weekly budget, most of us make budget on monthly basis because we get paid on monthly basis, but imagine your budget will be on weekly basis, it’s like every week is new budget and new start, and in order to keep track of the weekly budget you need to know how much you need to spend in a week. To be honest in the first we made a lot of mistakes but at the end we found out how much we need to spend weekly, and this need analysis with trial and error for at least one month then you will master your weekly budgeting.&lt;/p&gt;
&lt;p&gt;Now the idea is build a system that can keep track of your payments or expenses against your estimated budget for a week. The application name is &lt;strong&gt;Ma3ana …&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">EmadMokhtar</dc:creator><pubDate>Mon, 16 Mar 2015 13:00:00 +0300</pubDate><guid isPermaLink="false">tag:www.emadmokhtar.com,2015-03-16:/my-first-django-app.html</guid><category>django</category><category>python</category><category>sideproject</category></item></channel></rss>